from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from sqlalchemy.ext.asyncio import AsyncSession

from create_bot import bot
from db.pg_orm_query import orm_get_last_10_users, orm_count_users, orm_get_mailing_list, orm_not_mailing_users
from db.r_operations import redis_mailing_users, redis_mailing_msg, redis_mailing_from, redis_mailing_btns
from filters.chat_type import ChatType
from filters.is_admin import IsAdmin
from keyboards.inline import get_callback_btns
from keyboards.reply import get_keyboard
from tools.mailing import simple_mailing

admin_private_router = Router()
admin_private_router.message.filter(ChatType("private"), IsAdmin())


@admin_private_router.message(F.text == "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def get_profile(message: Message, session: AsyncSession):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        count = await orm_count_users(session)
        mailing_count = await orm_not_mailing_users(session)

        last_users_data = await orm_get_last_10_users(session)
        last_users_data = last_users_data[::-1]
        admin_text = (
            f"üë• –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö <b>{count}</b> —á–µ–ª–æ–≤–µ–∫, –∏–∑ –Ω–∏—Ö –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ {mailing_count}. \n"
            f"–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        )

        for user in last_users_data:
            user_link = f"<a href='tg://user?id={user.user_id}'>{user.user_id}</a>"
            admin_text += (
                f"{user.id}. üë§ –¢–µ–ª–µ–≥—Ä–∞–º ID: {user_link}\n"
                f"üìù –ü–æ–ª–Ω–æ–µ –∏–º—è: {user.name}\n"
            )

            if user.username is not None:
                admin_text += f"üîë –õ–æ–≥–∏–Ω: @{user.username}\n"

    await message.answer(admin_text, reply_markup=get_keyboard("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"))


@admin_private_router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_fsm(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_keyboard("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"))


class Mailing(StatesGroup):
    message = State()
    buttons = State()


@admin_private_router.message(StateFilter(None), F.text == "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def make_mailing(message: Message, state: FSMContext):

    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞—Å—Å—ã–ª–∞—Ç—å\n\n"
                         "<b>–í–ê–ñ–ù–û</b>\n\n"
                         "–í —Ä–∞—Å—Å—ã–ª–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ <u>–æ–¥–∏–Ω</u> —Ñ–∞–π–ª*!\n"
                         "<i>–§–∞–π–ª‚Äî —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>",
                         reply_markup=get_keyboard("–û—Ç–º–µ–Ω–∞",
                                                   placeholder="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
    )
                         )
    await state.set_state(Mailing.message)


@admin_private_router.message(StateFilter(Mailing.message))
async def get_message_for_mailing(message: Message, state: FSMContext):
    await state.update_data(message=message.message_id)
    await state.set_state(Mailing.buttons)
    await message.reply("–ë—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?", reply_markup=get_callback_btns(
        btns={"–î–∞": "add_btns",
              "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞—Å—Å—ã–ª–∫–µ": "confirm_mailing", "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏": "cancel_mailing"}
    )
                        )


@admin_private_router.callback_query(StateFilter(Mailing.buttons), F.data == "add_btns")
async def add_btns_mailing(callback: CallbackQuery):
    await callback.answer("")
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤–∏–¥–∞:\n"
                                  "—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:—Å—Å—ã–ª–∫–∞\n"
                                  "—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏:—Å—Å—ã–ª–∫–∞\n\n"
                                  "–ü—Ä–∏–º–µ—Ä: \n<pre>–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç:https://example.com\n"
                                  "–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É:https://t.me/for_test_ch/3</pre>"
                                  "\n\n"
                                  "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 10\n"
                                  "–ö–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å <b><u>–û–î–ù–ò–ú</u></b> —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏!")


@admin_private_router.message(StateFilter(Mailing.buttons), F.text.contains(":"))
async def btns_to_data(message: Message, state: FSMContext):
    raw_buttons = message.text.split("\n")
    clean_buttons = {}
    for btn in raw_buttons:
        try:
            text, link = btn.split(":", maxsplit=1)
            clean_buttons[text.strip()] = link.strip()
        except ValueError:
            await message.answer(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–æ–ø–∫–∏: {btn}")
            return
    await state.update_data(buttons=clean_buttons)
    data = await state.get_data()
    await message.answer(f"‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è\n"
                         f"–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:")
    await bot.copy_message(chat_id=message.from_user.id, from_chat_id=message.chat.id, message_id=data[
        "message"],
                           reply_markup=get_callback_btns(btns=data["buttons"]))
    await message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?", reply_markup=get_callback_btns(btns={"–î–∞": "confirm_mailing",
                                                                                       "–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å": "cancel_mailing"}))



@admin_private_router.message(StateFilter(Mailing.message))
async def get_message_for_mailing(message: Message, state: FSMContext):
    await state.update_data(message=message.message_id)
    await state.set_state(None)
    await message.reply("–†–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?", reply_markup=get_callback_btns(
        btns={"–î–∞": "confirm_mailing",
              "–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å": "cancel_mailing"}
    )
                        )


@admin_private_router.callback_query(StateFilter(Mailing.message), F.data == "cancel_mailing")
@admin_private_router.callback_query(StateFilter(Mailing.buttons), F.data == "cancel_mailing")
async def cancel_mailing(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    current_state = await state.get_state()

    if current_state is not None:
        await state.set_state(Mailing.message)
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞—Å—Å—ã–ª–∞—Ç—å")


@admin_private_router.callback_query(StateFilter("*"), F.data == "confirm_mailing")
async def confirm_mailing(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    async with ChatActionSender.typing(bot=bot, chat_id=callback.message.from_user.id):
        await callback.answer("")
        await redis_mailing_users(await orm_get_mailing_list(session))
        data = await state.get_data()
        await redis_mailing_msg(str(data.get("message")))
        await redis_mailing_from(str(callback.message.chat.id))
        await redis_mailing_btns(data.get("buttons"))
        await state.clear()

        success, notsuccess, blocked, elapsed_time_str = await simple_mailing()
        if elapsed_time_str == "":
            elapsed_time_str = "–º–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã"

        await callback.message.answer(
            text=f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞.\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n–£—Å–ø–µ—à–Ω–æ - {success}\n–ù–µ—É–¥–∞—á–Ω–æ - {notsuccess}\n\n"
                 f"–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: <b>{elapsed_time_str}</b>\n\n"
                 f"<span class='tg-spoiler'>–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É {blocked} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)</span>",
            reply_markup=get_keyboard("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        )


@admin_private_router.message(F.text.contains("test"))
async def test(message: Message):
    await message.answer("test")
    await bot.copy_message(chat_id=message.from_user.id, from_chat_id=message.chat.id, message_id=message.message_id,
                           reply_markup=get_callback_btns(btns={"test": "test"}))
