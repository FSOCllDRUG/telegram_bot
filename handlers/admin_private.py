from aiogram import F, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from sqlalchemy.ext.asyncio import AsyncSession

from create_bot import bot, env_admins
from db.pg_orm_query import orm_count_users, orm_get_mailing_list, orm_not_mailing_users_count, \
    orm_add_channel, orm_add_admin_to_channel, orm_get_channels_for_admin, orm_get_user_data, \
    orm_add_admin
from db.r_operations import redis_set_mailing_users, redis_set_mailing_msg, redis_set_msg_from, redis_set_mailing_btns, \
    redis_check_channel, redis_check_admin, get_active_users_count
from filters.chat_type import ChatType
from filters.is_admin import IsAdmin, IsOwner
from keyboards.inline import get_callback_btns
from keyboards.reply import get_keyboard, admin_kb
from tools.mailing import simple_mailing
from tools.utils import update_admins, get_chat_id, cbk_msg, msg_to_cbk, link_to_dev, admins_list_text

admin_private_router = Router()
admin_private_router.message.filter(ChatType("private"), IsAdmin())


@admin_private_router.message(F.text == "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
async def get_profile(message: Message, session: AsyncSession):
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        count = await orm_count_users(session)
        mailing_count = await orm_not_mailing_users_count(session)
        admin_text = (
            f"üë•\n–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö <b>{count}</b> —á–µ–ª–æ–≤–µ–∫, –∏–∑ –Ω–∏—Ö –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ {mailing_count}. \n"
            f"\n\n"
        )

        active_users_day = await get_active_users_count(1)
        active_users_week = await get_active_users_count(7)
        active_users_month = await get_active_users_count(30)

        admin_text += (f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\nüë•üóì\n"
                       f"–î–µ–Ω—å: {active_users_day}\n"
                       f"–ù–µ–¥–µ–ª—è: {active_users_week}\n"
                       f"–ú–µ—Å—è—Ü: {active_users_month}"
                       )

        if message.from_user.id in env_admins:
            admin_text += await admins_list_text(session)
    await message.answer(admin_text, reply_markup=admin_kb())


@admin_private_router.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_fsm(message: Message, state: FSMContext) -> None:
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=admin_kb())


class Mailing(StatesGroup):
    message = State()
    buttons = State()


# Mailing handlers starts
@admin_private_router.message(StateFilter(None), F.text == "–†–∞—Å—Å—ã–ª–∫–∞")
async def make_mailing(message: Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞—Å—Å—ã–ª–∞—Ç—å\n\n"
                         "<b>–í–ê–ñ–ù–û</b>\n\n"
                         "–í —Ä–∞—Å—Å—ã–ª–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ <u>–æ–¥–∏–Ω</u> —Ñ–∞–π–ª*!\n"
                         "<i>–§–∞–π–ª‚Äî —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>",
                         reply_markup=get_keyboard("–û—Ç–º–µ–Ω–∞",
                                                   placeholder="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"
                                                   )
                         )
    await state.set_state(Mailing.message)


@admin_private_router.message(StateFilter(Mailing.message))
async def get_message_for_mailing(message: Message, state: FSMContext):
    await state.update_data(message=message.message_id)
    await state.set_state(Mailing.buttons)
    await message.reply("–ë—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å URL–∫–Ω–æ–ø–∫–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?", reply_markup=get_callback_btns(
        btns={"–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏": "add_btns",
              "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞—Å—Å—ã–ª–∫–µ": "confirm_mailing", "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏": "cancel_mailing"}
    )
                        )


@admin_private_router.callback_query(StateFilter(Mailing.buttons), F.data == "add_btns")
async def add_btns_mailing(callback: CallbackQuery):
    await callback.answer("")
    await callback.message.answer(cbk_msg)


@admin_private_router.message(StateFilter(Mailing.buttons), F.text.contains(":"))
async def btns_to_data(message: Message, state: FSMContext):
    await state.update_data(buttons=await msg_to_cbk(message))
    data = await state.get_data()
    await message.answer(f"–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ:"
                         f"\n‚¨áÔ∏è")
    await bot.copy_message(chat_id=message.from_user.id, from_chat_id=message.chat.id, message_id=data[
        "message"],
                           reply_markup=get_callback_btns(btns=data["buttons"]))
    await message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?", reply_markup=get_callback_btns(btns={"–î–∞": "confirm_mailing",
                                                                                       "–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å": "cancel_mailing"}))


@admin_private_router.callback_query(StateFilter(Mailing.message), F.data == "cancel_mailing")
@admin_private_router.callback_query(StateFilter(Mailing.buttons), F.data == "cancel_mailing")
async def cancel_mailing(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    current_state = await state.get_state()

    if current_state is not None:
        await state.set_state(Mailing.message)
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞—Å—Å—ã–ª–∞—Ç—å")


@admin_private_router.callback_query(StateFilter("*"), F.data == "confirm_mailing")
async def confirm_mailing(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    async with ChatActionSender.typing(bot=bot, chat_id=callback.message.from_user.id):
        await callback.answer("")
        await redis_set_mailing_users(await orm_get_mailing_list(session))
        data = await state.get_data()
        await redis_set_mailing_msg(str(data.get("message")))
        await redis_set_msg_from(str(callback.message.chat.id))
        await redis_set_mailing_btns(data.get("buttons"))
        await state.clear()

        success, notsuccess, blocked, elapsed_time_str = await simple_mailing()
        if elapsed_time_str == "":
            elapsed_time_str = "–º–µ–Ω–µ–µ —Å–µ–∫—É–Ω–¥—ã"

        await callback.message.answer(
            text=f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–∞.\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n–£—Å–ø–µ—à–Ω–æ - {success}\n–ù–µ—É–¥–∞—á–Ω–æ - {notsuccess}\n\n"
                 f"–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: <b>{elapsed_time_str}</b>\n\n"
                 f"<span class='tg-spoiler'>–ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É {blocked} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(–µ–π)</span>",
            reply_markup=get_keyboard("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
        )


# Mailing handlers ends


# Update admins list in Redis
@admin_private_router.message(F.text == "/admin")
async def upd_admin_list(message: Message, session: AsyncSession):
    admins = await update_admins(session, env_admins)
    await message.answer(f'{admins}')


# Add channel handlers


@admin_private_router.message(F.text == "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def get_user_channels(message: Message, session: AsyncSession, state: FSMContext):
    user_id = message.from_user.id
    channels = await orm_get_channels_for_admin(session, user_id)
    if not channels:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ ü´•",
                             reply_markup=get_callback_btns(btns={"–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª": "add_channel"}))
        return
    channels_str = ""
    btns = {}
    for channel in channels:
        chat = await bot.get_chat(channel.channel_id)
        channels_str += f"<a href='{chat.invite_link}'>{chat.title}</a>\n"
        btns[chat.title] = f"channel_{channel.channel_id}"
    await message.answer(f"–¢–≤–æ–∏ –∫–∞–Ω–∞–ª—ã:\n{channels_str}",
                         reply_markup=get_callback_btns(btns=btns))
    await message.answer("–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª?",
                         reply_markup=get_callback_btns(btns={"–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª": "add_channel"}))


class AddChannel(StatesGroup):
    admin_id = State()
    channel_id = State()


@admin_private_router.callback_query(F.data == "add_channel")
async def start_add_channel(callback: CallbackQuery, state: FSMContext):
    await state.update_data(admin_id=callback.from_user.id)
    await callback.answer("")
    await callback.message.answer("–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ <b>—Å–≤–æ–π</b> –∫–∞–Ω–∞–ª —Å <b><i><u>–ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</u></i></b>\n\n"
                                  "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n"
                                  "\n‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
                                  "\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"
                                  "\n‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                                  "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –¥–æ–±–∞–≤–∏—à—å –º–µ–Ω—è –≤ –∫–∞–Ω–∞–ª, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É‚¨áÔ∏è",
                                  reply_markup=get_callback_btns(btns={"–Ø –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞!": "added_to_channel"}))
    await state.set_state(AddChannel.channel_id)


@admin_private_router.callback_query(StateFilter(AddChannel.channel_id), F.data == "added_to_channel")
async def bot_added_to_channel(callback: CallbackQuery):
    await callback.answer("")
    await callback.message.answer("–°—É–ø–µ—Ä!\n"
                                  "–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º, "
                                  "–ª–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –∞–π–¥–∏ –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å @ —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞")


@admin_private_router.message(StateFilter(AddChannel.channel_id))
async def check_channel(message: Message, session: AsyncSession, state: FSMContext):
    channel_id = await get_chat_id(message)
    user_id = message.from_user.id
    if channel_id:
        await message.reply(f"ID –∫–∞–Ω–∞–ª–∞: {channel_id}")
        check = await redis_check_channel(user_id, channel_id)
        if check:
            await orm_add_channel(session, channel_id)
            await orm_add_admin_to_channel(session, user_id, channel_id)
            await message.answer("–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            await state.clear()
        else:
            await message.answer("–õ–∏–±–æ —Ç—ã –º–µ–Ω—è –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª –≤ –∫–∞–Ω–∞–ª, –ª–∏–±–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(")
    else:
        await message.answer("–Ø –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π —É—Å–ª–æ–≤–∏—è–º –æ–ø–∏—Å–∞–Ω–Ω—ã–º –≤—ã—à–µ!")


@admin_private_router.message(F.text == "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", IsOwner())
async def add_admin_to_bot(message: Message, session: AsyncSession):
    text: str = "–í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞:\n"
    owner: int = env_admins[1]
    id_for_query = int(owner)
    user = await orm_get_user_data(session, id_for_query)
    user_link = f"<a href='tg://user?id={user.user_id}'>{user.user_id}</a>"
    text += (
        f"üë§ –¢–µ–ª–µ–≥—Ä–∞–º ID: {user_link}\n"
        f"üìù –ü–æ–ª–Ω–æ–µ –∏–º—è: {user.name}\n"
    )

    if user.username is not None:
        text += f"üîë –õ–æ–≥–∏–Ω: @{user.username}\n"

    if message.from_user.id in env_admins:
        text += await admins_list_text(session)
    await message.answer(text=text,
                         reply_markup=get_callback_btns(btns={"–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞": "add_admin",
                                                              "–°—Ç—É–∫–Ω—É—Ç—å —Ä–∞–∑—Ä–∞–±–∞":
                                                                  link_to_dev},
                                                        sizes=(1,)))


class AddAdmin(StatesGroup):
    user_id = State()
    confirm = State()


@admin_private_router.callback_query(F.data == "add_admin")
async def add_admin(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    await state.set_state(AddAdmin.user_id)
    await callback.message.answer("–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º\n\n"
                                  "‚ÄºÔ∏è<b><u>–í–ê–ñ–ù–û</u></b>‚ÄºÔ∏è\n"
                                  "–≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º",
                                  reply_markup=get_keyboard("–û—Ç–º–µ–Ω–∞"))


@admin_private_router.message(AddAdmin.user_id)
async def get_admin_id(message: Message, state: FSMContext, session: AsyncSession):
    try:
        text = "–¢—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        user_id = await get_chat_id(message)
        await state.update_data(user_id=user_id)
        user = await orm_get_user_data(session, user_id)
        if user is None:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞!")
            return
        elif await redis_check_admin(user_id):
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω!\n"
                                 "–í–æ–∑–≤—Ä–∞—â–∞—é —Ç–µ–±—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin_kb())
            await state.clear()
            return
        user_link = f"<a href='tg://user?id={user.user_id}'>{user.user_id}</a>"
        text += (
            f"üë§ –¢–µ–ª–µ–≥—Ä–∞–º ID: {user_link}\n"
            f"üìù –ü–æ–ª–Ω–æ–µ –∏–º—è: {user.name}\n"
        )

        if user.username is not None:
            text += f"üîë –õ–æ–≥–∏–Ω: @{user.username}\n"
        await message.answer(text=text,
                             reply_markup=get_callback_btns(btns={"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
                                                                      "confirm"}))
        await state.set_state(AddAdmin.confirm)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")


@admin_private_router.callback_query(F.data == "confirm", StateFilter(AddAdmin.confirm))
async def add_admin_done(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.answer("")
    data = await state.get_data()
    admin_id = data.get("user_id")
    await orm_add_admin(session, admin_id)
    text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!"
    text += await admins_list_text(session)
    await callback.message.answer(text=text, reply_markup=admin_kb())
    await update_admins(session, env_admins)
    await state.clear()


@admin_private_router.callback_query(F.data.startswith("channel_"))
async def channel_choosen(callback: CallbackQuery):
    channel_id = int(callback.data.split("_")[1])
    await callback.answer("")
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "1. –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞\n"
        "2. –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª\n",
        reply_markup=get_callback_btns(
            btns={
                "1. –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞": f"create_post_{channel_id}",
                "2. –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª": f"add_admin_to_channel_{channel_id}"
            }
        )
    )


class CreatePost(StatesGroup):
    channel_id = State()
    message = State()
    buttons = State()


# Channel post handlers starts
@admin_private_router.callback_query(StateFilter(None), F.data.startswith("create_post_"))
async def make_mailing(callback: CallbackQuery, state: FSMContext):
    await state.set_state(CreatePost.channel_id)
    await callback.answer("")
    channel_id = int(callback.data.split("_")[2])
    await state.update_data(channel_id=channel_id)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –ø–æ—Å—Ç–∏—Ç—å\n\n"
                                  "<b>–í–ê–ñ–ù–û</b>\n\n"
                                  "–í –ø–æ—Å—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ <u>–æ–¥–∏–Ω</u> —Ñ–∞–π–ª*!\n"
                                  "<i>–§–∞–π–ª‚Äî —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç/–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ/–≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ</i>",
                                  reply_markup=get_keyboard("–û—Ç–º–µ–Ω–∞",
                                                            placeholder="–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–ª—è –ø–æ—Å—Ç–∞"
                                                            )
                                  )
    await state.set_state(CreatePost.message)


@admin_private_router.message(StateFilter(CreatePost.message))
async def get_message_for_post(message: Message, state: FSMContext):
    await state.update_data(message=message.message_id)
    await state.set_state(CreatePost.buttons)
    await message.reply("–ë—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å URL-–∫–Ω–æ–ø–∫–∏ –∫ –ø–æ—Å—Ç—É?", reply_markup=get_callback_btns(
        btns={"–î–∞": "add_btns",
              "–ü–æ—Å—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫": "confirm_post", "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏": "cancel_post"}
    )
                        )


@admin_private_router.callback_query(StateFilter(CreatePost.buttons), F.data == "add_btns")
async def add_btns_post(callback: CallbackQuery):
    await callback.answer("")
    await callback.message.answer(cbk_msg)


@admin_private_router.message(StateFilter(CreatePost.buttons), F.text.contains(":"))
async def btns_to_data(message: Message, state: FSMContext):
    await state.update_data(buttons=await msg_to_cbk(message))
    data = await state.get_data()
    await message.answer(f"–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ:"
                         f"\n‚¨áÔ∏è")
    await bot.copy_message(chat_id=message.from_user.id, from_chat_id=message.chat.id, message_id=data[
        "message"],
                           reply_markup=get_callback_btns(btns=data["buttons"]))
    await message.answer("–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø–æ—Å—Ç–∏–Ω–≥—É?", reply_markup=get_callback_btns(btns={"–î–∞": "confirm_post",
                                                                                       "–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å": "cancel_post"}))


@admin_private_router.callback_query(StateFilter(CreatePost.message), F.data == "cancel_post")
@admin_private_router.callback_query(StateFilter(CreatePost.buttons), F.data == "cancel_post")
async def cancel_mailing(callback: CallbackQuery, state: FSMContext):
    await callback.answer("")
    current_state = await state.get_state()

    if current_state is not None:
        await state.set_state(CreatePost.message)
        await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º –ø–æ—Å—Ç–∏—Ç—å")


@admin_private_router.callback_query(StateFilter("*"), F.data == "confirm_post")
async def confirm_mailing(callback: CallbackQuery, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=callback.message.from_user.id):
        await callback.answer("")
        data = await state.get_data()
        if "buttons" not in data:
            await bot.copy_message(chat_id=data["channel_id"], from_chat_id=callback.message.chat.id,
                                   message_id=data["message"])
        else:
            await bot.copy_message(chat_id=data["channel_id"], from_chat_id=callback.message.chat.id,
                                   message_id=data["message"],
                                   reply_markup=get_callback_btns(btns=data["buttons"]))
        await callback.message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")

        await state.clear()



